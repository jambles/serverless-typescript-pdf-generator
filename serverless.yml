service: pdfr

frameworkVersion: '>=1.0.0 <2.0.0'

custom:
  defaultStage: 'pre'

provider:
  name: aws
  runtime: nodejs6.10
  stage: ${opt:stage, self:custom.defaultStage}
  region: ap-southeast-2
  environment:
    authoriserArn: ${ssm:/lambda/authentication/${opt:stage}/COGNITO_USER_POOL_ARN}
    ENV: ${self:provider.stage}
    DOMAIN: ${ssm:/lambda/${opt:stage}/DOMAIN}
    pdfS3Bucket: pdfr

resources:
  Resources:
    UploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.pdfS3Bucket}-${self:provider.stage}
        AccessControl: PublicRead
        CorsConfiguration:
          CorsRules:
          - AllowedMethods:
            - GET
            - PUT
            - POST
            - HEAD
            AllowedOrigins:
            - "*"
            AllowedHeaders:
            - "*"
    BasePathMapping:
      DependsOn: IamPolicy
      Type: AWS::ApiGateway::BasePathMapping
      Properties:
        BasePath: ${self:service}
        DomainName: ${self:provider.environment.DOMAIN}
        RestApiId:
          Ref: ApiGatewayRestApi
        Stage: ${self:provider.stage}
    IamPolicy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: sls-${self:service}-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Action:
                - "s3:PutObject"
                - "s3:GetObject"
              Resource: 'arn:aws:s3:::${self:provider.environment.pdfS3Bucket}-${self:provider.stage}/*'
            - Effect: Allow
              Action:
                - dynamodb:GetItem
              Resource: 'arn:aws:dynamodb:${self:provider.region}:*:*'
        Roles:
          - Ref: IamRoleLambdaExecution

plugins:
  - serverless-webpack

functions:
  createPdf:
    handler: pdf-generator.generatePdf
    events:
     - http:
        path: 'generate/pdf'
        method: post
#        authorizer:
#            arn: ${self:provider.environment.authoriserArn}
        cors: true

